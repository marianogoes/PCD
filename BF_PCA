{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/marianogoes/PCD/blob/main/BF_PCA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0MRC0e0KhQ0S"
      },
      "source": [
        "# K-Nearest Neighbors (K-NN)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LWd1UlMnhT2s"
      },
      "source": [
        "## Librerías utilizadas"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YvGPUQaHhXfL"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import (\n",
        "    confusion_matrix,\n",
        "    accuracy_score,\n",
        "    precision_score,\n",
        "    recall_score,\n",
        "    f1_score\n",
        ")"
      ],
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K1VMqkGvhc3-"
      },
      "source": [
        "## Importar la base de datos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M52QDmyzhh9s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1207c3a3-bf9c-4c11-a3f0-6d6d18dbb33b"
      },
      "source": [
        "dataset = pd.read_csv('BD_ACP2.csv', encoding='latin-1')\n",
        "X = dataset.iloc[:, :-1].values\n",
        "y = dataset.iloc[:, -1].values\n",
        "X"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.17398745,  1.54144762,  0.06676816],\n",
              "       [-1.7362266 ,  0.15427699, -2.97382383],\n",
              "       [-3.68452502, -1.43309878,  0.29069794],\n",
              "       ...,\n",
              "       [ 2.22766723, -1.09656091,  0.49883559],\n",
              "       [ 1.60510732, -0.50598537,  0.20158472],\n",
              "       [ 0.31990863, -1.31493138,  0.83018367]])"
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YvxIPVyMhmKp"
      },
      "source": [
        "## Método Hold out para la creación de la base de prueba"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AVzJWAXIhxoC"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)"
      ],
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bb6jCOCQiAmP"
      },
      "source": [
        "## Método KNN con la base de entrenamiento"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import mean_squared_error\n",
        "train_scores = []\n",
        "cv_scores    = []\n",
        "estimator_range = range(1, 30, 2)\n",
        "\n",
        "for n_estimators in estimator_range:\n",
        "\n",
        "    modelo = KNeighborsClassifier(n_neighbors = n_estimators, metric = 'minkowski', p = 2)\n",
        "\n",
        "    # Error de validación cruzada\n",
        "    scores = cross_val_score( estimator = modelo,X= X_train,y= y_train,scoring   = 'neg_root_mean_squared_error', cv= 5)\n",
        "    cv_scores.append(scores.mean())\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(6, 3.84))\n",
        "ax.plot(estimator_range, cv_scores, label=\"cv scores\")\n",
        "ax.plot(estimator_range[np.argmin(cv_scores)], min(cv_scores),\n",
        "        marker='o', color = \"red\", label=\"min score\")\n",
        "ax.set_xlabel(\"n_estimators\")\n",
        "ax.set_title(\"Evolución del cv-error vs número de vecinos\")\n",
        "plt.legend();\n",
        "print(f\"Valor óptimo de n_estimators: {estimator_range[np.argmin(cv_scores)]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "outputId": "73c0bde0-f60c-4aaa-de0f-8c6441373a51",
        "id": "XS_7C9lXXSCI"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valor óptimo de n_estimators: 17\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x384 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Según el resultado, se alcanza el mejor valor a loas 17 vecinos pero debido a temas de optimización se optará por tomar el valor de 5 que es donde se dobla la gráfica."
      ],
      "metadata": {
        "id": "RzjJNdRZbbD9"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e0pFVAmciHQs"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\n",
        "classifier.fit(X_train, y_train)\n",
        "y_pred = classifier.predict(X_test)"
      ],
      "execution_count": 162,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h4Hwj34ziWQW"
      },
      "source": [
        "## Matriz de confusión y precisión"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D6bpZwUiiXic",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e33c7c85-fad7-416a-fffc-78657e2308ac"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(cm)\n",
        "accuracy_score(y_test, y_pred)"
      ],
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[3770   10]\n",
            " [  11 5122]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9976438909458095"
            ]
          },
          "metadata": {},
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision = precision_score(y_test, y_pred)\n",
        "recall = recall_score(y_test, y_pred)\n",
        "f1score = f1_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Precision = {precision}\")\n",
        "print(f\"Recall = {recall}\")\n",
        "print(f\"F1 Score = {f1score}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yREfu-DddUiO",
        "outputId": "21b1ce97-3e6c-4753-d98a-3b94e5adee92"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision = 0.9980514419329696\n",
            "Recall = 0.9978570037015391\n",
            "F1 Score = 0.9979542133463224\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Random Forest"
      ],
      "metadata": {
        "id": "uaGSzjye5xwY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Carga de la base"
      ],
      "metadata": {
        "id": "BXRtPLTbrQDD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv('BD_ACP2.csv', encoding='latin-1')\n",
        "X = dataset.iloc[:, :-1].values\n",
        "y = dataset.iloc[:, -1].values"
      ],
      "metadata": {
        "id": "K8oW6Hla5_MD"
      },
      "execution_count": 165,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yVYbbh8h6SKD"
      },
      "source": [
        "## Método Hold out para la creación de la base de prueba"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q21Q4ICh6SKE"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)"
      ],
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se calcula el mejor parámetro de árboles para Random Forest"
      ],
      "metadata": {
        "id": "oDSwRGr_xSsw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import mean_squared_error\n",
        "train_scores = []\n",
        "cv_scores    = []\n",
        "estimator_range = range(1, 30, 5)\n",
        "\n",
        "for n_estimators in estimator_range:\n",
        "\n",
        "    modelo = RandomForestClassifier(n_estimators = n_estimators, criterion = 'entropy', random_state = 0)\n",
        "\n",
        "    # Error de validación cruzada\n",
        "    scores = cross_val_score( estimator = modelo,X= X_train,y= y_train,scoring   = 'neg_root_mean_squared_error', cv= 5)\n",
        "    cv_scores.append(-1*scores.mean())\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(6, 3.84))\n",
        "ax.plot(estimator_range, cv_scores, label=\"cv scores\")\n",
        "ax.plot(estimator_range[np.argmin(cv_scores)], min(cv_scores),\n",
        "        marker='o', color = \"red\", label=\"min score\")\n",
        "ax.set_xlabel(\"n_estimators\")\n",
        "ax.set_title(\"Evolución del cv-error vs número árboles\")\n",
        "plt.legend();\n",
        "print(f\"Valor óptimo de n_estimators: {estimator_range[np.argmin(cv_scores)]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "id": "ucsnu4XRhjE1",
        "outputId": "7f2e67e0-e524-41b7-98f6-7f08e217a742"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valor óptimo de n_estimators: 16\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x384 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aunque se alcanza el mejor valor para n=16, se usarán solamente 6 debido a que es donde se optimiza el resultado considerando la mejora al aumentar el número de árboles"
      ],
      "metadata": {
        "id": "dVlyDDwvx483"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jZ2j1x2Z6SKI"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "classifier = RandomForestClassifier(n_estimators = 6, criterion = 'entropy', random_state = 0)\n",
        "classifier.fit(X_train, y_train)\n",
        "y_pred = classifier.predict(X_test)"
      ],
      "execution_count": 168,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "roK9FNBv6SKK"
      },
      "source": [
        "## Creación de la matriz de confusión y la precisión"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c1d4547e-e41d-48fa-f5e2-ad30f1d7154e",
        "id": "mqFd3sqj6SKK"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "print(cm)\n",
        "accuracy_score(y_test, y_pred)"
      ],
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[3773    7]\n",
            " [  11 5122]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.997980477953551"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "precision = precision_score(y_test, y_pred)\n",
        "recall = recall_score(y_test, y_pred)\n",
        "f1score = f1_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Precision = {precision}\")\n",
        "print(f\"Recall = {recall}\")\n",
        "print(f\"F1 Score = {f1score}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XODe4AZYcvpd",
        "outputId": "9c671a18-82f0-48f9-b7ee-de5a27a047bc"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision = 0.9986352115422109\n",
            "Recall = 0.9978570037015391\n",
            "F1 Score = 0.9982459559540051\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Comparación de métodos"
      ],
      "metadata": {
        "id": "UoM66VQbHZSX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "KNN_acc=[]\n",
        "for i in range(30):\n",
        "  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n",
        "\n",
        "  classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\n",
        "  classifier.fit(X_train, y_train)\n",
        "  y_pred = classifier.predict(X_test)\n",
        "  KNN_acc.append(accuracy_score(y_test, y_pred))"
      ],
      "metadata": {
        "id": "q13YvTsYENSn"
      },
      "execution_count": 178,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "RF_acc=[]\n",
        "for i in range(30):\n",
        "  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n",
        "\n",
        "  classifier = RandomForestClassifier(n_estimators = 6, criterion = 'entropy', random_state = 0)\n",
        "  classifier.fit(X_train, y_train)\n",
        "  y_pred = classifier.predict(X_test)\n",
        "  RF_acc.append(accuracy_score(y_test, y_pred))"
      ],
      "metadata": {
        "id": "sAqq5Wp4IKai"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prueba de normalidad sobre ambas muestras de resultados"
      ],
      "metadata": {
        "id": "5EtxxNF-zQN6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import shapiro\n",
        "\n",
        "#perform Shapiro-Wilks test4\n",
        "stats,p = shapiro(KNN_acc)\n",
        "\n",
        "print('The Test-Statistic and p-value are as follows: \\n Test-Statistic= %.3f, p-value= %.3f'%(stats,p))\n",
        "\n",
        "stats,p = shapiro(RF_acc)\n",
        "\n",
        "print('The Test-Statistic and p-value are as follows: \\n Test-Statistic= %.3f, p-value= %.3f'%(stats,p))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iD9KiwRbIegg",
        "outputId": "1a9f5a7a-dfb2-44c0-f97d-8c8b3b994e76"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Test-Statistic and p-value are as follows: \n",
            " Test-Statistic= 0.982, p-value= 0.867\n",
            "The Test-Statistic and p-value are as follows: \n",
            " Test-Statistic= 0.955, p-value= 0.228\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como el estadístico de prueba es mayor que 0.05 entonces no se rechaza la hipotesis nula por lo que no hay evidencia suficiente para decir que no proviene de una distribución normal"
      ],
      "metadata": {
        "id": "fEnDya-rHnMd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "comparative=np.zeros([30,2])\n",
        "comparative[:,0]=KNN_acc\n",
        "comparative[:,1]=RF_acc\n",
        "comparative"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yuM9Y-6S-xq7",
        "outputId": "fe3b21f3-441d-49fb-c299-8faaa47b3243"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.9973073 , 0.99809267],\n",
              "       [0.9973073 , 0.99831706],\n",
              "       [0.9973073 , 0.9974195 ],\n",
              "       [0.99775609, 0.99842926],\n",
              "       [0.99820487, 0.99708291],\n",
              "       [0.99764389, 0.99775609],\n",
              "       [0.9973073 , 0.9975317 ],\n",
              "       [0.99663413, 0.99786828],\n",
              "       [0.99764389, 0.99708291],\n",
              "       [0.9975317 , 0.99775609],\n",
              "       [0.99820487, 0.99809267],\n",
              "       [0.99831706, 0.9975317 ],\n",
              "       [0.99786828, 0.99831706],\n",
              "       [0.9975317 , 0.99820487],\n",
              "       [0.99708291, 0.99674633],\n",
              "       [0.99786828, 0.99820487],\n",
              "       [0.9974195 , 0.99786828],\n",
              "       [0.99775609, 0.99775609],\n",
              "       [0.99663413, 0.99798048],\n",
              "       [0.99798048, 0.9975317 ],\n",
              "       [0.99775609, 0.99697072],\n",
              "       [0.99708291, 0.99820487],\n",
              "       [0.9975317 , 0.9974195 ],\n",
              "       [0.99809267, 0.99708291],\n",
              "       [0.99809267, 0.99719511],\n",
              "       [0.99876585, 0.99786828],\n",
              "       [0.9975317 , 0.9973073 ],\n",
              "       [0.99854146, 0.99820487],\n",
              "       [0.99809267, 0.99775609],\n",
              "       [0.9974195 , 0.99786828]])"
            ]
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(comparative,0))\n",
        "print(np.std(comparative,0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U2X4o2lZ_jZx",
        "outputId": "d301502f-3e8f-44fb-e1ae-522428f5ae13"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.99767381 0.99771495]\n",
            "[0.00049156 0.00044923]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#t-student\n",
        "from scipy import stats\n",
        "stats2, p =stats.ttest_ind(KNN_acc, RF_acc)\n",
        "print('The Test-Statistic and p-value are as follows: \\n Test-Statistic= %.3f, p-value= %.3f'%(stats2,p))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0zluHQnHDEBM",
        "outputId": "18a7f3ee-bf75-4a64-afdf-490d38bb1309"
      },
      "execution_count": 183,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Test-Statistic and p-value are as follows: \n",
            " Test-Statistic= -0.333, p-value= 0.741\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Wilcoxon test\n",
        "from scipy.stats import ranksums\n",
        "stats2, p =ranksums(KNN_acc, RF_acc)\n",
        "print('The Test-Statistic and p-value are as follows: \\n Test-Statistic= %.3f, p-value= %.3f'%(stats2,p))\n",
        "\n",
        "# A p-value of less than 0.05 indicates that this test rejects the hypothesis at the 5% significance level."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aibLiPQzEqfF",
        "outputId": "a6491977-8704-491a-d035-6e91d4e7658b"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Test-Statistic and p-value are as follows: \n",
            " Test-Statistic= -0.480, p-value= 0.631\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como el estadístico de prueba es mayor que 0.05 entonces no se rechaza la hipotesis nula por lo que no hay evidencia suficiente para afirmar que hay diferencia entre ambos grupos, es decir no hay diferencia estadística entre las medias de cada grupo"
      ],
      "metadata": {
        "id": "d7d9_vdNJlDC"
      }
    }
  ]
}